#!/usr/bin/env bash
#
# Copyright (c) 2025, Jochen Issing <c.333+github@nesono.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

alias l='ls -lF'
alias ll='ls -la'
alias la='ls -a'

alias bc='bc -l -q'

alias sudorsync="sudo rsync -aPe ssh --rsync-path='sudo rsync'"

alias cdd='cd ~/Downloads'
alias cds='cd ~/Developer'
alias cdc='cd ~/Documents'
alias cdo='cd ~/office'

alias sed_nocolor='sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"'

alias kitty_install='curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin'
alias kitty_linux_desktop_integrate='
	ln -sf ~/.local/kitty.app/bin/kitty ~/.local/bin/ &&
	ln -sf ~/.local/kitty.app/bin/kitten ~/.local/bin/ &&
	cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/ &&
	cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/ &&
	sed -i "s|Icon=kitty|Icon=$(readlink -f ~/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png)|g" ~/.local/share/applications/kitty*.desktop &&
	sed -i "s|Exec=kitty|Exec=$(readlink -f ~/.local/kitty.app/bin/kitty)|g" ~/.local/share/applications/kitty*.desktop &&
	echo "kitty.desktop" > ~/.config/xdg-terminals.list
'
rustup_install() {
	if which rustup >/dev/null 2>&1; then
		echo "rustup is already installed."
	else
		curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
	fi
}
nvm_install() {
	local version
	version=$(curl -s https://api.github.com/repos/nvm-sh/nvm/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
	if command -v nvm >/dev/null 2>&1; then
		echo "nvm is already installed."
	else
		curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/"$version"/install.sh | bash
	fi
}
alias omz_install='sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"'
zsh_autocomplete_install() {
	if [[ -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ]]; then
		echo "zsh-autocomplete is already installed."
	else
		git clone https://github.com/zsh-users/zsh-autosuggestions.git "$ZSH_CUSTOM"/plugins/zsh-autosuggestions
	fi
	if [[ -d "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting" ]]; then
		echo "zsh-syntax-highlighting is already installed."
	else
		git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$ZSH_CUSTOM"/plugins/zsh-syntax-highlighting
	fi
	if [[ -d "$ZSH_CUSTOM/plugins/fast-syntax-highlighting" ]]; then
		echo "fast-syntax-highlighting is already installed."
	else
		git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git "$ZSH_CUSTOM"/plugins/fast-syntax-highlighting
	fi
	echo "Please add the following plugins to your ~/.zshrc file:"
	echo "zsh-autosuggestions zsh-syntax-highlighting fast-syntax-highlighting"
}

add_string_to_env_var() {
	# Function to add a path to the specified environment variable in ~/.zprofile and ~/.profile
	# Usage: add_string_to_env_var <path_to_add> [env_var]
	# If env_var is not specified, it defaults to PATH.
	local path_to_add
	local env_var
	path_to_add="$1"
	env_var="${2:-PATH}"
	if [[ -z "$path_to_add" ]]; then
		echo "No path provided to add to profiles."
		return 1
	fi
	touch ~/.zprofile
	touch ~/.profile
	# export GOPATH="${GOPATH:+$GOPATH:}$HOME/go"
	local str_to_add
	str_to_add="export $env_var=\$\{$env_var:+\$$env_var:}$path_to_add"
	if ! grep -qF "$str_to_add" ~/.zprofile; then
		echo "$str_to_add" >> ~/.zprofile
	fi
	if ! grep -qF "$str_to_add" ~/.profile; then
		echo "$str_to_add" >> ~/.profile
	fi
}

go_install() {
	local latest_go_version
	local os_type
	local machine_type
	latest_go_version=$(curl -s https://go.dev/VERSION\?m=text | head -n 1)
	os_type=$(uname -s | tr '[:upper:]' '[:lower:]')
	machine_type=$(uname -m | tr '[:upper:]' '[:lower:]')
	if [[ "$os_type" == "linux" ]]; then
		machine_type=$(echo "$machine_type" | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/')
	fi
	if command -v go >/dev/null 2>&1; then
		echo "Go is already installed."
	else
		sudo rm -rf /usr/local/go
		sudo rm -rf /usr/local/go
		curl -sSL https://go.dev/dl/"${latest_go_version}"."${os_type}"-"${machine_type}".tar.gz | sudo tar -C /usr/local -xzf -
		echo "Go ${latest_go_version} installed successfully."
		add_string_to_env_var "/usr/local/go/bin"
		add_string_to_env_var "\$HOME/go" "GOPATH"
		add_string_to_env_var "\$GOPATH/bin" "PATH"
	fi
}


fzf_install() {
	if [[ -d "$HOME/.fzf" ]]; then
		echo "fzf is already installed."
	else
		git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
		~/.fzf/install
	fi
}

uv_install() {
	curl -LsSf https://astral.sh/uv/install.sh | sh
}

nvim_install() {
	TMPFILE=/tmp/nvim.appimage
	MACHINE=$(uname -m)
	SYSTEM=$(uname -s | tr '[:upper:]' '[:lower:]')

	if [[ "$SYSTEM" != "linux" ]]; then
		echo "This installation script only supports Linux."
		exit 1
	fi

	LATEST_VERSION=$(curl -s https://api.github.com/repos/neovim/neovim/releases/latest | jq -r '.tag_name')
	echo "Latest version: $LATEST_VERSION"

	INSTALLED_VERSION=""
	if command -v nvim >/dev/null 2>&1; then
		INSTALLED_VERSION=$(nvim --version | head -1 | cut -d ' ' -f 2)
	fi

	if [[ "$LATEST_VERSION" == "$INSTALLED_VERSION" ]]; then
		echo "Latest nvim version already installed: $INSTALLED_VERSION"
		exit 0
	fi

	URL="https://github.com/neovim/neovim/releases/download/$LATEST_VERSION/nvim-linux-$MACHINE.appimage"
	echo "Installing version $LATEST_VERSION"
	curl -L -o "$TMPFILE" "$URL"
	chmod a+x "$TMPFILE"

	mkdir -p "$HOME"/.local/bin/
	mv "$TMPFILE" "$HOME"/.local/bin/nvim
}

zoxide_install() {
	curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
}

shpool_install() {
	if command -v shpool >/dev/null 2>&1; then
		echo "shpool is already installed."
		return
	fi

	cargo install shpool
	curl -fLo "${XDG_CONFIG_HOME:-$HOME/.config}/systemd/user/shpool.service" --create-dirs https://raw.githubusercontent.com/shell-pool/shpool/master/systemd/shpool.service
	sed -i "s|/usr|$HOME/.cargo|" "${XDG_CONFIG_HOME:-$HOME/.config}/systemd/user/shpool.service"
	curl -fLo "${XDG_CONFIG_HOME:-$HOME/.config}/systemd/user/shpool.socket" --create-dirs https://raw.githubusercontent.com/shell-pool/shpool/master/systemd/shpool.socket
	systemctl --user enable shpool
	systemctl --user start shpool
	loginctl enable-linger
}

shpool_install_p10k_prompt() {
	# install shpool prompt status line
	if [[ "{$POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS:-}" == *shpool* ]]; then
		if grep -q "prompt_shpool" ~/.zshrc; then
			echo "shpool prompt already installed in ~/.zshrc"
		else
			cat <<'EOF' >> ~/.zshrc
function prompt_shpool() {
  if command -v shpool >/dev/null 2>&1; then
    if [[ -n "$SHPOOL_SESSION_NAME" ]]; then
      p10k segment -i '🐚' -t "$SHPOOL_SESSION_NAME" -f 15
    fi
  fi
}
typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
  shpool            # our custom segment
  "${POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS[@]}"  # keep existing ones
)
EOF
			echo "shpool prompt installed in ~/.zshrc"
		fi
	fi
}

if command -v shpool >/dev/null 2>&1; then
	alias spl='shpool list'
	alias spa='shpool attach'
	alias spd'=shpool detach'
	alias spk='shpool kill'
fi

if command -v lazygit >/dev/null 2>&1; then
  alias lg='lazygit'
fi
