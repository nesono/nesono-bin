#!/bin/zsh
#
# Copyright (c) 2012, Jochen Issing <iss@nesono.com>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# tmp/cache file to store the stack (array) DONT USE WHITESPACES HERE
STACKFILE=/tmp/${USER}.TRANSSTACKFILE.txt

function _nesono_transfer_apply_line()
{
  echo "processing \'${1}\'"
  # param 1: transfer stack line
  local filename="${1##*/}"
  filename="${filename%\'}"
  if [[ -e "${filename}" ]]; then
    suffix=0
    while [[ -e "${filename}".${suffix} ]]; do
      suffix=$(($suffix+1))
    done
    echo "-> ${1} '""${filename}.${suffix}""'"
    eval ${1} "'"${filename}.${suffix}"'"
  else
    # apply one item
    echo "-> ${1} ."
    eval ${1} .
  fi
}

# function to push some files onto path transfer stack - utility for cp|mv
function pusht()
{
  # reload stack
  unset TRANSSTACK
  [[ -r ${STACKFILE} ]] && TRANSSTACK=("${(@Q)${(z)"$(cat -- ${STACKFILE})"}}")
  if [[ ${TRANSSTACK} == '' ]]; then
    unset TRANSSTACK
  fi

  # set default mode
  MODE="cp -r"

  # check if any parameter given
  if [[ -z "${1}" ]]; then
    echo "usage: pusht [mv|cp] file|dir ..."
  fi

  # check first parameter for option (mv|cp)
  case "${1}" in
    mv )
    #echo "detected parameter $1"
    MODE="mv"
    shift
    ;;
    cp )
    # echo "detected parameter $1"
    MODE="cp -r"
    shift
    ;;
    "-h" )
    echo "usage: pusht [mv|cp] file|dir ..."
    return
    ;;
  esac

  # add remaining files/dirs to stack
  while [[ -n "${1}" ]]; do
    # convert relative paths to absolute ones
    local ABSPATH=$(rel2abs "${1}")
    # check if path exists
    if [[ -e "${ABSPATH}" ]]; then
      # append to STACK
      TRANSSTACK+="${MODE} '"${ABSPATH}"'"
    else
      echo "${ABSPATH}: no such file or directory - skipping"
    fi
    shift
  done

  # save stack to file
  print -r -- ${(qq)TRANSSTACK} > ${STACKFILE}
}

# function to apply path transfer stack values
function popt()
{
  # reload stack
  unset TRANSSTACK
  [[ -r ${STACKFILE} ]] && TRANSSTACK=("${(@Q)${(z)"$(cat -- ${STACKFILE})"}}")
  if [[ ${TRANSSTACK} == '' ]]; then
    unset TRANSSTACK
  fi

  # sanity check for empty array
  cnt=${#TRANSSTACK}
  if [[ ${cnt} -eq 0 ]]; then
    echo "stack is empty!"
    return
  fi

  local suffix=''
  # check for first parameter
  case "${1}" in
    "-d" )
    # just delete the last stack item
    # pop last item
    if [[ ${#TRANSSTACK} -gt 1 ]]; then
      TRANSSTACK[-2,-1]=${TRANSSTACK[-2]}
    else
      unset TRANSSTACK
    fi

    # save stack to file
    print -r -- ${(qq)TRANSSTACK} > ${STACKFILE}
    return
    ;;
    "-a" )
    # apply all stack items
    for item in ${TRANSSTACK}; do
      _nesono_transfer_apply_line ${item}
    done
    # remove transfer file
    echo '' > ${STACKFILE}
    return
    ;;
    "-f" )
    # flush all transfers - just don't reinsert existing
    return
    ;;
    "-h" )
    echo "usage: popt [-d|-a|-f|-h]"
    echo "             -d    discard top transfer from stack"
    echo "             -a    apply all transfers in stack"
    echo "             -f    flush all transfers from stack"
    echo "                   apply top transfer from stack"
    echo "             -h    print this help text"

    # save stack to file
    print -r -- ${(qq)TRANSSTACK} > ${STACKFILE}
    return
    ;;
  esac

  # apply transfer line
  _nesono_transfer_apply_line ${TRANSSTACK[-1]}
  # pop last item
  if [[ ${#TRANSSTACK} -gt 1 ]]; then
    TRANSSTACK[-2,-1]=${TRANSSTACK[-2]}
  else
    unset TRANSSTACK
  fi

  # save stack to file
  print -r -- ${(qq)TRANSSTACK} > ${STACKFILE}
}

# function to print all stacked transfers
function transfers()
{
  # reload stack
  unset TRANSSTACK
  [[ -r ${STACKFILE} ]] && TRANSSTACK=("${(@Q)${(z)"$(cat -- ${STACKFILE})"}}")
  if [[ ${TRANSSTACK} == '' ]]; then
    unset TRANSSTACK
  fi

  # print exisiting stack values from environment
  for v in ${TRANSSTACK};do
    echo "${v}"
  done
}
