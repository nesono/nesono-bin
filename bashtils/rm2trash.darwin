#!/bin/bash

# the trash destination directory (actually should be relative to Volumes)
export NESONO_TRASH_DIR=~/.Trash

if [ ! -d ${NESONO_TRASH_DIR} ]; then
  echo "\nDISABLED RM OVERLOAD!\n"
  return
fi

export DEBUG_RM2TRASH=0

# debug output function
function debug_out()
{
  [ ${DEBUG_RM2TRASH} -eq 1 ] && echo "DEBUG>>" $@
}

# remember rm binary
ORIG_RM=/bin/rm

# function to remove files in console into Trash... (not deleting anything)
function rm()
{
  local item
  local is_link
  for item in "$@"; do
    # print debug information if enabled
    debug_out "checking item: ${item}"

    # ignore any arguments
    if [[ "$item" = -* ]]; then
      continue
    fi

    # reset link
    is_link=0
    # check for bogus links
    if [ -L "${item}" ]; then
      is_link=1
      local target
      target=`ls -l ${item} | awk '{print $11;}'`
      if [ ! -e "${target}" ]; then
        echo "removing bogus link: \"${item}\""
        $ORIG_RM "${item}"
        continue
      fi
    fi

    # check for items existance
    if [ ! -e "${item}" ]; then :
      echo "ignoring \"${item}\" - not existing!"
      continue
    fi

    # create absolute path from relative one
    item=$(rel2abs "${item}")

    # print debug information if enabled
    debug_out "preparing to remove item: ${item}"

    # remove trailing slash
    local dst="${item##*/}"

    # for inside trash detection
    INSIDE_TRASH=${item##${NESONO_TRASH_DIR}}

    # check, if we try to delete something inside Trash
    if [ "${INSIDE_TRASH}" != "${item}" ]; then
      if [ -z "${INSIDE_TRASH}" ]; then
        echo "Trash not deleted! Needed by Mac OS X ;)"
        return 1
      fi
      echo "deleting inside trash ..."
      read -p "should I use original delete (${ORIG_RM})? [y/N]" REALLYDEL
      case $REALLYDEL in
        y|Y)
          echo "deleting ${dst} using ${ORIG_RM}"
          $ORIG_RM -r "${dst}"
          return
        ;;
        *)
          echo "not deleting anything"
          return 1
        ;;
      esac
    fi

    if [ ${is_link} -eq 1 ]; then
      # append the time if necessary
      while [ -L ${NESONO_TRASH_DIR}/"$dst" ]; do
        dst="$dst "$(date +%H-%M-%S)
      done
    else
      # append the time if necessary
      while [ -e ${NESONO_TRASH_DIR}/"$dst" ]; do
        dst="$dst "$(date +%H-%M-%S)
      done
    fi

    # print debug information if enabled
    debug_out "moving item \"${item}\" to trash"
    mv "$item" ${NESONO_TRASH_DIR}/"$dst"
  done
}
