#!/usr/bin/env bash
#
# Copyright (c) 2012, Jochen Issing <iss@nesono.com>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# function to create a directory and step into it
function cdmkdir()
{
	mkdir "$@"
	local path
	for path in "$@"; do
		# ignore any arguments
		if [[ "$path" = -* ]]; then :
		else
			cd "$path"
			return
		fi
	done
}

function cdgitclone()
{
	local last
	git clone $@

	for last; do true; done
	[[ -d "$last" ]] && cd "$last"
}

# function to create an absolute path from a relative one
function rel2abs()
{
	local dir
	local file
	local abspath

	#echo "input: \"${1}\""
	# check, if argument is a file
	if [ -f "${1}" ]; then
		# directory name
		dir="`dirname "${1}"`"
		#echo "dir: ${dir}"
		file="`basename "${1}"`"
		#echo "file: ${file}"

		# change into dir
		pushd "${dir}" &> /dev/null
		abspath="`pwd`/${file}"
		echo "${abspath}"
		popd &> /dev/null
	fi
	if [ -d "${1}" ]; then
		# change into dir
		pushd "${1}" &> /dev/null
		abspath="`pwd`"
		echo "${abspath}"
		popd &> /dev/null
	fi

	return 0
}

# helper function to get the current users name (not using ${USER}, which could be corrupt)
function current_username()
{
	id | sed 's/uid=[0-9][0-9]*(\([a-zA-Z][a-zA-Z]*\)).*/\1/g'
}

# calculate something
function calc ()
{
	echo "$*" | bc -l
}

function backup ()
{
	local destination
	# check switch
	if [[ "$1" == "-s" ]]; then
		shift
		item=$1
		echo "using short syntax"
		destination=${item}.bup
		echo "backup $item to $destination"

		if [[ -e "$destination" ]]; then
			echo "$destination already exists -- skipping"
		else
			cp -r "$item" "$destination";
		fi
	else
		item=$1
		echo "backup up $item"

		destination=$item.bup_`date +%Y-%m-%d_%H:%M:%S`
		while ( [[ -e "$destination" ]] ); do
			echo "$destination already exists"
			destination=$item.bup_`date +%Y-%m-%d_%H:%M:%S`
			echo "trying $destination"
		done
		echo "backup $item to $destination"
		cp -r "$item" "$destination";
	fi
	echo "finished"
}

function md5equal()
{
	if [[ -z "$1" ]]; then
		echo "usage: md5equal file_a file_b"
		echo "check two files for equality by their md5 hash"
		return
	fi
	if [[ -z "$2" ]]; then
		echo "usage: md5equal file_a file_b"
		echo "check two files for equality by their md5 hash"
		return
	fi
    local file_a_md5
    local file_b_md5
	file_a_md5=`md5 $1 | cut -d ' ' -f 4`
	file_b_md5=`md5 $2 | cut -d ' ' -f 4`

	echo "file A: $file_a_md5"
	echo "file B: $file_b_md5"

	if [[ "${file_a_md5}" == "${file_b_md5}" ]]; then
		echo "files \"$1\" and \"$2\" are equal"
	else
		echo "files \"$1\" and \"$2\" are NOT equal"
	fi
}

# function to create a new script with mode 755
function newscript()
{
	if [[ -z "$1" ]]; then
		echo "usage: newscript filename"
		return
	fi
	touch "$1"
	chmod 755 "$1"
	if [[ -n "$EDITOR" ]]; then
		$EDITOR "$1"
	fi
}

function append_to_path()
{
	if [[ -d "$1" ]]; then
		export PATH=$PATH:"$1"
	else
		echo "Warning: \"$1\" not found - clean up your config file(s)"
	fi
}

function git-branchstack()
{
	# get env variable
	BRANCHSTACK=${BRANCHSTACK}

	action=$1
	if [[ -z "$action" ]]; then
		echo "usage: $0 <action> ..."
	else
		shift
		currentbranch=`git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* //'`
		if [[ $? -eq 128 ]]; then
			echo "not in a git branch"
		else
			case $action in 
				"push")
					if [[ -z "$@" ]]; then 
						echo "usage: $0 push [options] <branchname>"
						return 124
					else
						git checkout $@
						export BRANCHSTACK=$currentbranch:${BRANCHSTACK}
					fi
					;;
				"pop")
					if [[ -n "${BRANCHSTACK}" ]]; then
						tocheckout=${BRANCHSTACK%%:*}
						export BRANCHSTACK=${BRANCHSTACK#*:}
						git checkout $tocheckout
					fi
					;;
				*)
					echo "unknown command: $@"
					;;
			esac
		fi
	fi
}

function tolower()
{
	if [ -z $1 ]; then
		echo ""
		echo "usage $0: $0 filename"
		echo "  makes the filename lowercase"
		echo ""
		return 1
	fi

	for file in $@; do
		lowered=`echo $file | tr [A-Z] [a-z]`
		if [ "$file" != "$lowered" ]; then
			mv "$file" "$lowered"
		else
			echo "file $lowered already exists, skipping renaming"
		fi
	done
}

function toupper()
{
	if [ -z $1 ]; then
		echo ""
		echo "usage $0: $0 filename"
		echo "  makes the filename uppercase"
		echo ""
		return 1
	fi

	for file in $@; do
		uppered=`echo $file | tr [a-z] [A-Z]`
		if [ "$file" != "$uppered" ]; then
			mv "$file" "$uppered"
		else
			echo "file $uppered alread exists, skipping renaming"
		fi
	done
}

function tonowhitespace()
{
	if [ -z $1 ]; then
		echo ""
		echo "usage $0: $0 filename"
		echo "  makes the filename having no whitespace"
		echo ""
		return 1
	fi

	for file in $@; do
		nowhitespace=`echo $file | tr ' ' _`
		if [ "$file" != "$nowhitespace" ]; then
			mv "$file" "$nowhitespace"
		else
			echo "file $nowhitespace alread exists, skipping renaming"
		fi
	done
}

function gitignore()
{
	if [[ -z "$*" ]]; then
		echo "please specify the file pattern you want to ignore"
		return 101
	fi

	local is_global=0
	local DIRTY=""
	local gitignorefile

	local branch
	local git_repo_root
	local gitignorefile
	local repostatus

	# check if we are in a git repo
	repostatus=`git status --porcelain 2> /dev/null`
	if [[ $? -eq 128 ]]; then
		is_global=1
		gitignorefile="~/.gitignore"
		echo "not in a git repo"
		echo "adding ignore rules to global gitignore file"
	else
		branch=`git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* //'`
		git_repo_root=`git rev-parse --show-toplevel`
		gitignorefile="$git_repo_root/.gitignore"

		[ -z "`echo "$repostatus" | grep -e '.gitignore' | grep -e '^ [RDMA]'`" ] || DIRTY="*"
		[ -z "`echo "$repostatus" | grep -e '.gitignore' | grep -e '^?? '`"     ] || DIRTY="*"
		[ -z "`echo "$repostatus" | grep -e '^[RMDA]'`"  ]                        || DIRTY="${DIRTY}+"
		echo "In git repo:"
		echo "     branch: $branch"
		echo "       root: $git_repo_root"
		echo "      dirty: $DIRTY"
		pushd $git_repo_root &> /dev/null
	fi

	read -n1 -r -s -p "Press any key to continue" key

	local pattern
	for pattern; do
		echo "adding ignore lines pattern"
		echo "to $gitignorefile"
		for entry; do
			echo $entry >> $gitignorefile
		done
	done

	if [[ -n "$EDITOR" ]]; then
		$EDITOR $gitignorefile 
		if [[ $is_global -eq 0 ]]; then
			if [[ -z "$DIRTY" ]]; then
				git add $gitignorefile
				git commit -v
			else
				echo "Dirty working copy, please commit the change yourself"
			fi
		else
			echo "global ignore file, no commit neccessary"
		fi
	else
		echo "EDITOR env var not set"
		echo "please open $gitignorefile,"
		echo "check the contents, and commit"
		echo "the change yourself (if in a repo"
	fi
	popd &> /dev/null
}

function gitallcmd()
{
	if [[ $# -lt 2 ]]; then
		echo "Usage: $0 <dir> <cmd>"
		echo "Invokes <cmd> in all git roots found in <dir>"
		return 101
	fi

	local searchbase reposfound
	searchbase=$1
	echo "searchbase: $searchbase"
	shift
	cmd="$@"

	find "$searchbase" -name .git | sed 's/\/\.git//' | xargs -I % $SHELL -c "pushd %; $cmd; popd"
}

