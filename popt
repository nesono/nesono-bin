#!/usr/bin/env python

# BSD LICENSE
#
# Copyright (c) 2012, Jochen Issing <iss@nesono.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os      # environ
import getpass # getuser
import sys     # exit

def save_and_close_transfers( transfers ):
	stackfile.write( '\n'.join(transfers) )
	stackfile.close()

session = os.environ['_NESONO_SESSION_COOKIE']
stackfilename = ('/tmp/%s.'+session+'.tstack')%(getpass.getuser())

transfers = open( stackfilename, 'r' ).read().split('\n')

stackfile = open( stackfilename, 'w')

if len(transfers) == 0:
	print 'no transfers'
	sys.exit(-1)
if transfers[0] == '':
	print 'no transfers'
	sys.exit(-1)

appname = os.path.basename(sys.argv.pop(0))

# no option given
if len(sys.argv) == 0:
	# apply latest added transfer
	print 'applying:',transfers[-1]+' .'
	os.system( transfers.pop()+' .' )
	save_and_close_transfers( transfers )
	sys.exit(0)

if sys.argv[0] == '-d':
	# discard top transfer
	print 'discarding:', transfers.pop()
	save_and_close_transfers( transfers )
	sys.exit(0)

if sys.argv[0] == '-a':
	# apply all transfers in stack
	for transfer in transfers:
		print 'applying:', transfer+' .'
		os.system( transfer+' .' )
	save_and_close_transfers( [] )
	sys.exit(0)

if sys.argv[0] == '-f':
	# discard/flush all transfers
	open( stackfilename, 'w' )
	sys.exit(0)

if sys.argv[0] == '-h':
	print 'usage:', appname, '[-d|-f|-a|-h]'
	print '         apply last added transfer if called without arguments'
	print '    -d   discard last added transfer'
	print '    -f   discard/flush all transfers'
	print '    -a   apply all transfers'
	print '    -h   print this help text'
	save_and_close_transfers( transfers )
	sys.exit(0)

print 'unknown option:', sys.argv[0]
print 'usage:', appname, '[-d|-f|-a|-h]'
print '         apply last added transfer if called without arguments'
print '    -d   discard last added transfer'
print '    -f   discard/flush all transfers'
print '    -a   apply all transfers'
print '    -h   print this help text'
save_and_close_transfers( transfers )
sys.exit(-1)
